%h3 List of Parameter Sets

.clear-element
.create_ps_area
  - if @save_task_ids.present?
    = @ps_creation_msg
    %a{"data-toggle" => "tooltip", "data-original-title" => "cancel creation", href: "#{_cancel_create_ps_simulator_path(@simulator)}"}
      %i.fa.fa-times
.clear-element
%table.table.table-condensed.table-striped#params_list{:'data-source' => "#{_parameters_list_simulator_path(@simulator.to_param, format: "json", query_id: @query_id)}"}
  %thead
    %tr
      - ParameterSetsListDatatable.header(@simulator).each do |th_element|
        = raw(th_element)
  %tbody

- unless OACIS_READ_ONLY
  %a.btn.btn-primary{href: new_simulator_parameter_set_path(@simulator)}
    New Parameter Set

%h3 Parameter Filter
.foo
  = form_tag( _make_query_simulator_path(@simulator), class: 'form-horizontal' ) do |f|
    #queries_form_original
      .row
        .form-group.col-md-2#select_param_form
          - prm_def = @simulator.parameter_definitions.map {|x| [x.key, {"type" => x.type, "default" => x.default}] }
          - prm_def = Hash[*prm_def.flatten]
          = select_tag "query[][param]", options_for_select(prm_def), class: 'form-control'
        .form-group.col-md-1#select_matcher_form
          = select_tag "query[][matcher]", options_for_select({""=>""}), class: 'form-control'
        .form-group.col-md-3#select_value_form
          = text_field_tag "query[][value]", "", class: 'form-control'
        .col-md-6
    .btn#add_queries_form Add more filters
    = hidden_field_tag "query_id", @query_id
    = submit_tag "Save this Filter", :class => 'btn btn-primary'

- if @query_list
  %h4 Select Filter
  = form_for(@simulator, url: {controller:"simulators", action:"show"}, html: {method: :get, class: 'form-inline'} ) do |f|
    .form-group
      = select_tag "query_id", options_for_select(@query_list, @query_id), prompt: "all", class: 'form-control'
    = f.submit "Load", class: 'btn btn-primary', name: nil

- unless @query_id.blank?
  %h4 Delete Filter
  = form_tag( _make_query_simulator_path(@simulator) ) do |f|
    = hidden_field_tag "query_id", @query_id
    = submit_tag "Delete this Filter", :class => 'btn btn-primary', :name => :delete_query, :confirm => 'Are you sure?'

#runs_list_modal.modal.large.fade
  .modal-dialog.modal-vertical-centered
    .modal-content
      .modal-header
        %button.close{type: "button", "data-dismiss" => "modal"}
          &times;
        %h4.modal-title
      .modal-body.large#runs_list_modal_page
      .modal-footer
        %button.btn.btn-default{type: "button", "data-dismiss" => "modal"}
          Close

:javascript
  $(function() {
    var cloned = $('#queries_form_original').html();
    $('#add_queries_form').click(function() {
      $('#add_queries_form').before( cloned );
      $('.row:last select', $(this).parent() ).trigger('change');
    });
  });

  $(function() {
    $("body").on("change", "#select_param_form select", function(){
      $("#select_matcher_form option",$(this).parent().parent()).remove()
      var matcher_form_selector = $("#select_matcher_form",$(this).parent().parent())
      var matcher_val;
      var matcher_text;
      if($(":selected",this).attr('type') == "Integer" || $(":selected",this).attr('type') == "Float") {
        matcher_val = #{raw ParameterSetQuery::NumTypeMatchers.to_json};
        matcher_text = #{raw ParameterSetQuery::NumTypeMatcherStrings.to_json};
      } else if($(":selected",this).attr('type') == "Boolean") {
        matcher_val = #{raw ParameterSetQuery::BooleanTypeMatchers.to_json};
        matcher_text = #{raw ParameterSetQuery::BooleanTypeMatchers.to_json};
      } else if($(":selected",this).attr('type') == "String") {
        matcher_val = #{raw ParameterSetQuery::StringTypeMatchers.to_json};
        matcher_text = #{raw ParameterSetQuery::StringTypeMatchers.to_json};
      }

      for(i in matcher_val){
        $("select",matcher_form_selector).append("<option value=\"\"></option>");
        $("option:nth-child("+(parseInt(i)+1)+")",matcher_form_selector).val(matcher_val[i]).text(matcher_text[i]);
      }

      var value_form_selector = $("#select_value_form",$(this).parent().parent())
    });
  });

  $(function() {
    var parameter_form_selector = $("#select_param_form select")
    parameter_form_selector.val("#{@simulator.parameter_definitions.first.key}");
    parameter_form_selector.trigger("change");
  });

  $(function () {
    $('[data-toggle="tooltip"]').tooltip();
  })

:javascript
  $(function() {
    var oPsTable = create_parameter_sets_list('#params_list', 100);
    if( window.bEnableAutoReload ) {
      setInterval( function() {
        if( $("#tab-list-parameters").length > 0 ) { // ParameterSet tab in Simulator show page
          if( $("#tab-list-parameters")[0].classList.contains("active") ) {
            oPsTable.ajax.reload(null, false);
          }
        }
      }, 5000);
    }
  });

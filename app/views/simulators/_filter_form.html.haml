.modal-header
  %button.close{type: "button", "data-dismiss": "modal"}
    &times;
  %h4 Filter
  .modal-body.large#parameter_filter_setting_body
    %form.form_inline#filter_form
      .row
        .form-group.col-md-3#select_param_form
          - options = simulator.parameter_definitions.map {|x| [x.key, x.key, {'data-param-type': x.type}] }
          = select_tag "param", options_for_select(options), class: 'form-control'
        .form-group.col-md-2#select_matcher_form
          = select_tag "matcher", options_for_select(["",""]), class: 'form-control'
        .form-group.col-md-3#select_value_form
          = text_field_tag "value", "", class: 'form-control'
        .col-md-6
    .btn#add_filter_form Add more filter
  .modal-footer
    - if @simulator.parameter_set_filters.size > 0
      %button#parameter_set_filters_list_btn.btn.btn-default{onclick: "$('#parameter_set_filters_list_modal').modal('show');"}
        Load Filter
    %button#parameter_filter_ok.btn.btn-primary
      OK

:javascript
  function update_filter_form_row(row_selector) {
    const type = $(row_selector+' select#param option:selected').data('param-type');
    if(type == "Integer" || type == "Float") {
      matcher_val = #{raw ParameterSetFilter::NumTypeMatchers.to_json};
      matcher_text = #{raw ParameterSetFilter::NumTypeMatcherStrings.to_json};
    } else if(type == "String") {
      matcher_val = #{raw ParameterSetFilter::StringTypeMatchers.to_json};
      matcher_text = #{raw ParameterSetFilter::StringTypeMatchers.to_json};
    }
    const sel_matcher = $(row_selector+' select#matcher');
    sel_matcher.empty();
    for(i in matcher_val){
      sel_matcher.append('<option value="'+matcher_val[i]+'">'+matcher_text[i]+'</option>');
    }
  }
  $(function() {
    const cloned = $('#filter_form').html();
    $('#add_filter_form').click(function() {
      $('#filter_form').append(cloned);
      update_filter_form_row('#filter_form .row:last');
    });

    update_filter_form_row('#filter_form .row:last');
  });

  $(function() {
    $("#filter_form").on("change", "#select_param_form select", function(){
      $("#select_matcher_form option",$(this).parent().parent()).remove();
      var matcher_form_selector = $("#select_matcher_form",$(this).parent().parent());
      var matcher_val;
      var matcher_text;
      if($(":selected",this).attr('type') == "Integer" || $(":selected",this).attr('type') == "Float") {
        matcher_val = #{raw ParameterSetFilter::NumTypeMatchers.to_json};
        matcher_text = #{raw ParameterSetFilter::NumTypeMatcherStrings.to_json};
      } else if($(":selected",this).attr('type') == "String") {
        matcher_val = #{raw ParameterSetFilter::StringTypeMatchers.to_json};
        matcher_text = #{raw ParameterSetFilter::StringTypeMatchers.to_json};
      }

      for(i in matcher_val){
        $("select",matcher_form_selector).append("<option value=\"\"></option>");
        $("option:nth-child("+(parseInt(i)+1)+")",matcher_form_selector).val(matcher_val[i]).text(matcher_text[i]);
      }
    });
    var parameter_form_selector = $("#select_param_form select");
    parameter_form_selector.val("#{@simulator.parameter_definitions.first.key}");
    parameter_form_selector.trigger("change");
  });
